"use client"

import { useEffect, useState } from "react"
import { useParams, useRouter } from "next/navigation"
import { ArrowLeft, Share2, ExternalLink, Settings, Sparkles, Copy, Check } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { templates } from "@/lib/templates"
import { toast } from "@/hooks/use-toast"

export default function DeployedPage() {
  const params = useParams()
  const router = useRouter()
  const [deploymentConfig, setDeploymentConfig] = useState<any>(null)
  const [template, setTemplate] = useState<any>(null)
  const [copied, setCopied] = useState(false)
  const [userInput, setUserInput] = useState("")
  const [output, setOutput] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)

  useEffect(() => {
    const templateId = params.id as string
    const foundTemplate = templates.find((t) => t.id === templateId)
    const config = localStorage.getItem(`deployment-${templateId}`)

    if (foundTemplate && config) {
      setTemplate(foundTemplate)
      setDeploymentConfig(JSON.parse(config))
    } else {
      router.push("/")
    }
  }, [params.id, router])

  const handleGenerate = async () => {
    if (!userInput.trim()) return

    setIsGenerating(true)
    setOutput("")

    // Simulate AI generation based on template category
    await new Promise((resolve) => setTimeout(resolve, 2000))

    let simulatedOutput = ""
    switch (template?.category) {
      case "text-to-image":
        simulatedOutput = `Generated image for: "${userInput}"\n\n[This would show an AI-generated image based on your prompt using ${deploymentConfig?.model?.name}]`
        break
      case "text-to-text":
        simulatedOutput = `Generated response using ${deploymentConfig?.model?.name}:\n\nBased on your input "${userInput}", here's a comprehensive response that demonstrates the capabilities of this AI model. This is a simulated output that would normally be generated by the selected model.`
        break
      case "image-to-text":
        simulatedOutput = `Image analysis using ${deploymentConfig?.model?.name}:\n\nThis would analyze any uploaded image and provide detailed descriptions, object detection, or other image-to-text capabilities based on your specific use case.`
        break
      default:
        simulatedOutput = `Generated output using ${deploymentConfig?.model?.name} for your input: "${userInput}"`
    }

    setOutput(simulatedOutput)
    setIsGenerating(false)
  }

  const handleShare = async () => {
    const shareUrl = window.location.href
    try {
      await navigator.clipboard.writeText(shareUrl)
      setCopied(true)
      toast({
        title: "Link copied!",
        description: "Share this link with others to let them use your app.",
      })
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      toast({
        title: "Failed to copy",
        description: "Please copy the URL manually.",
        variant: "destructive",
      })
    }
  }

  if (!template || !deploymentConfig) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50">
      {/* Header */}
      <header className="border-b bg-white/80 backdrop-blur-sm sticky top-0 z-40">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button variant="ghost" onClick={() => router.push("/")}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back to Gallery
              </Button>
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg flex items-center justify-center">
                  <Sparkles className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h1 className="font-bold">{deploymentConfig.title}</h1>
                  <Badge variant="secondary" className="text-xs">
                    {template.category.replace("-", " ").toUpperCase()}
                  </Badge>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Button variant="outline" onClick={handleShare}>
                {copied ? <Check className="w-4 h-4 mr-2" /> : <Share2 className="w-4 h-4 mr-2" />}
                {copied ? "Copied!" : "Share"}
              </Button>
              <Button variant="outline">
                <Settings className="w-4 h-4 mr-2" />
                Settings
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main App Interface */}
          <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Sparkles className="w-5 h-5" />
                  <span>{deploymentConfig.title}</span>
                </CardTitle>
                <CardDescription>{deploymentConfig.description}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="input">
                    {template.category === "text-to-image"
                      ? "Describe the image you want to generate"
                      : template.category === "text-to-text"
                        ? "Enter your text prompt"
                        : template.category === "image-to-text"
                          ? "Upload an image or enter image URL"
                          : "Enter your input"}
                  </Label>
                  {template.category === "image-to-text" ? (
                    <Input
                      id="input"
                      placeholder="Paste image URL or upload image..."
                      value={userInput}
                      onChange={(e) => setUserInput(e.target.value)}
                    />
                  ) : (
                    <Textarea
                      id="input"
                      placeholder={
                        template.category === "text-to-image"
                          ? "A beautiful sunset over mountains..."
                          : template.category === "text-to-text"
                            ? "Write a story about..."
                            : "Enter your prompt..."
                      }
                      value={userInput}
                      onChange={(e) => setUserInput(e.target.value)}
                      rows={3}
                    />
                  )}
                </div>
                <Button onClick={handleGenerate} disabled={!userInput.trim() || isGenerating} className="w-full">
                  {isGenerating ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Generating...
                    </>
                  ) : (
                    <>
                      <Sparkles className="w-4 h-4 mr-2" />
                      Generate
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>

            {/* Output */}
            {output && (
              <Card>
                <CardHeader>
                  <CardTitle>Output</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="bg-gray-50 rounded-lg p-4 min-h-[200px]">
                    {template.category === "text-to-image" ? (
                      <div className="flex items-center justify-center h-48 bg-gradient-to-r from-purple-100 to-blue-100 rounded-lg">
                        <div className="text-center">
                          <div className="w-16 h-16 bg-white rounded-lg flex items-center justify-center mx-auto mb-3">
                            <Sparkles className="w-8 h-8 text-purple-600" />
                          </div>
                          <p className="text-sm text-gray-600">Generated Image Preview</p>
                          <p className="text-xs text-gray-500 mt-1">"{userInput}"</p>
                        </div>
                      </div>
                    ) : (
                      <pre className="whitespace-pre-wrap text-sm">{output}</pre>
                    )}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-base">App Configuration</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div>
                  <Label className="text-xs font-medium text-gray-600">Model</Label>
                  <p className="text-sm font-medium">{deploymentConfig.model?.name}</p>
                  <p className="text-xs text-gray-500">{deploymentConfig.model?.description}</p>
                </div>
                <div>
                  <Label className="text-xs font-medium text-gray-600">Category</Label>
                  <p className="text-sm">{template.category.replace("-", " ").toUpperCase()}</p>
                </div>
                <div>
                  <Label className="text-xs font-medium text-gray-600">Deployed</Label>
                  <p className="text-sm">{new Date(deploymentConfig.timestamp).toLocaleString()}</p>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-base">Template Info</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div>
                  <Label className="text-xs font-medium text-gray-600">Tags</Label>
                  <div className="flex flex-wrap gap-1 mt-1">
                    {template.tags.map((tag: string) => (
                      <Badge key={tag} variant="outline" className="text-xs">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                </div>
                <div>
                  <Label className="text-xs font-medium text-gray-600">Usage</Label>
                  <p className="text-sm">{template.uses} deployments</p>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-base">Actions</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <Button variant="outline" size="sm" className="w-full justify-start bg-transparent">
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Open in Cursor
                </Button>
                <Button variant="outline" size="sm" className="w-full justify-start bg-transparent">
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Open in Lovable
                </Button>
                <Button variant="outline" size="sm" className="w-full justify-start bg-transparent">
                  <Copy className="w-4 h-4 mr-2" />
                  Clone Template
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
